@page "/"
@page "/editor"
@namespace BlazorDrawFBP.Pages

@inject IDialogService DialogService
@inject Mas.Infrastructure.Common.ConnectionManager ConMan
@inject Shared Shared
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime

@using System.Collections.Immutable
@using System.Reflection
@using Blazor.Diagrams.Components.Widgets
@using BlazorDrawFBP.Models
@using Newtonsoft.Json.Linq
@using MudBlazor
@using System.Timers
@using Capnp.Rpc
@using Mas.Infrastructure.BlazorComponents
@using Mas.Schema.Fbp
@using Mas.Schema.Registry

<MudDialogProvider/>
<MudPopoverProvider/>

<div>
    <MudGrid>
        <MudItem xs="12">
            @code { private static string HeaderStyle => $"background-color: {Color.Primary}; width: 100%"; }
            <MudPaper Class="pa-2 align-start d-flex" Style="@HeaderStyle">
                <MudIconButton Icon="@Icons.Material.Filled.Menu"
                               Color="Color.Inherit"
                               Edge="Edge.Start"/>
                <MudImage Class="ml-3 mr-3" Src="img/ocapi_just_logo.png" Height="45"/>
                <MudText Class="mt-1" Typo="Typo.h4">OCAPI-Flow Tool</MudText>
                <MudSpacer/>
                <MudButtonGroup Class="mt-1">
                    <MudButton StartIcon="@Icons.Material.Filled.Add"
                               Variant="@Variant.Filled"
                               Color="@Color.Inherit"
                               @onclick="AddComponentServiceSturdyRef">
                        Components
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Add"
                               Variant="@Variant.Filled"
                               Color="@Color.Inherit"
                               @onclick="AddChannelServiceSturdyRef">
                        Channels
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Settings"
                               Color="Color.Inherit"
                               Variant="Variant.Filled"
                               OnClick="@ShowSturdyRefDialog">
                        Edit SturdyRefs
                    </MudButton>
                </MudButtonGroup>
                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End"/>
            </MudPaper>
        </MudItem>
        <MudItem xs="2">
            <MudPaper Height="90vh" Class="overflow-scroll">
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel Text="Actions" Expanded="true">
                        <MudStack Spacing="1">
                            @* <MudButton StartIcon="@Icons.Material.Filled.Delete" *@
                            @*            Variant="@Variant.Filled" *@
                            @*            Color="@Color.Warning" *@
                            @*            FullWidth="true" *@
                            @*            @onclick="RemoveNode"> *@
                            @*     Remove Node *@
                            @* </MudButton> *@
                            <MudFileUpload T="IBrowserFile"
                                           FilesChanged="LoadFlow"
                                           Style="margin-top:0;">
                                <ActivatorContent>
                                    <MudButton StartIcon="@Icons.Material.Filled.Upload"
                                               Variant="@Variant.Filled"
                                               Color="@Color.Primary"
                                               FullWidth="true">
                                        Load Flow
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            <MudButton StartIcon="@Icons.Material.Filled.Download"
                                       Variant="@Variant.Filled"
                                       Color="@Color.Primary"
                                       FullWidth="true"
                                       @onclick="() => SaveFlow(false)">
                                Save Flow
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Download"
                                       Variant="@Variant.Filled"
                                       Color="@Color.Primary"
                                       FullWidth="true"
                                       @onclick="() => SaveFlow(true)">
                                Export as Mermaid Flow
                            </MudButton>
                            <MudButton
                                StartIcon="@(ClearButtonDisabled ? Icons.Material.Filled.Delete : Icons.Material.Filled.DeleteForever)"
                                Variant="@Variant.Filled"
                                Color="@(ClearButtonDisabled ? Color.Warning : Color.Error)"
                                FullWidth="true"
                                OnClick="ClearButtonClicked">
                                @(ClearButtonDisabled ? "Clear Flow" : "Clear Flow")
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.PlayCircle"
                                       Variant="@Variant.Filled"
                                       Color="@Color.Default"
                                       FullWidth="true"
                                       @onclick="@ExecuteFlow">
                                Execute flow
                            </MudButton>
                        </MudStack>
                    </MudExpansionPanel>
                    <MudSwitch @bind-Value="@InteractiveMode"
                               Label="Interactive"
                               Color="Color.Success"
                               Style="padding-left: 10px"/>
                    <MudTextField @bind-Value="@_query"
                                  Label="Search component ..."
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Cancel"
                                  OnAdornmentClick="() => { _query = null; }"/>
                    @foreach (var catId in sortedCatIds)
                    {
                        var compIds = Shared.CatId2CompServiceIdAndComponentIds[catId];
                        <MudExpansionPanel Text="@(Shared.CatId2Info[catId].Name)"
                                           Expanded="@(!string.IsNullOrWhiteSpace(_query)
                                                     || _expandedPanels.GetValueOrDefault(catId, false))"
                                           ExpandedChanged="b => { if (string.IsNullOrWhiteSpace(_query)) _expandedPanels[catId] = b; }">
                            <MudStack Spacing="1">
                                @foreach (var compId in compIds)
                                {

                                    if (!Shared.ServiceIdAndComponentId2Component.TryGetValue(compId, out var comp)) continue;
                                    if (comp.Type == Component.ComponentType.subflow) continue;
                                    var desc = comp.Info.Description ?? "";

                                    if (!string.IsNullOrWhiteSpace(_query) &&
                                        comp.Info.Name?.Contains(_query, StringComparison.OrdinalIgnoreCase) == false &&
                                        desc.Contains(_query, StringComparison.OrdinalIgnoreCase) == false)
                                    {
                                        continue;
                                    }

                                    if (string.IsNullOrEmpty(comp.Info.Description))
                                    {
                                        <MudChip Style="position: relative; top: +7px;"
                                                 Variant="Variant.Text"
                                                 Color="Color.Info"
                                                 Label="true"
                                                 Size="Size.Small"
                                                 T="string">
                                            @(Shared.RegistryServiceIdToPetNameAndSturdyRef.GetValueOrDefault(compId.Item1, ("No Service", null)).Item1)
                                        </MudChip>
                                        <MudButton style="cursor: grab;"
                                                   draggable="true"
                                                   @ondragstart="() => OnNodeDragStart(comp, compId.Item1)"
                                                   Variant="Variant.Filled"
                                                   StartIcon="@Icons.Material.Filled.DragIndicator"
                                                   IconColor="Color.Primary"
                                                   Color="Color.Default"
                                                   FullWidth="true"
                                                   Size="Size.Large">
                                            @comp.Info.Name
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudTooltip>
                                            <ChildContent>
                                                <MudChip Style="position: relative; top: +7px;"
                                                         Variant="Variant.Text"
                                                         Color="Color.Info"
                                                         Label="true"
                                                         Size="Size.Small"
                                                         T="string">
                                                    @(Shared.RegistryServiceIdToPetNameAndSturdyRef.GetValueOrDefault(compId.Item1, ("No Service", null)).Item1)
                                                </MudChip>
                                                <MudButton style="cursor: grab;"
                                                           draggable="true"
                                                           @ondragstart="() => OnNodeDragStart(comp, compId.Item1)"
                                                           Variant="Variant.Filled"
                                                           StartIcon="@Icons.Material.Filled.DragIndicator"
                                                           IconColor="Color.Primary"
                                                           FullWidth="true"
                                                           Color="Color.Default">
                                                    @comp.Info.Name
                                                </MudButton>
                                            </ChildContent>
                                            <TooltipContent>
                                                <MudText Typo="Typo.body2">@comp.Info.Description</MudText>
                                            </TooltipContent>
                                        </MudTooltip>
                                    }
                                }
                            </MudStack>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
        <MudItem xs="10">
            <MudPaper Outlined="true" class="diagram-container" ondragover="event.preventDefault();"
                      @ondrop="OnNodeDrop">
                <CascadingValue Value="Diagram" IsFixed="true">
                    <DiagramCanvas>
                        <Widgets>
                            <NavigatorWidget Width="200"
                                             Height="120"
                                             Class="border border-black bg-white absolute"
                                             Style="bottom: 15px; right: 15px;"/>
                        </Widgets>
                    </DiagramCanvas>
                </CascadingValue>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    private Timer ClearButtonTimer { get; set; }
    private bool ClearButtonDisabled { get; set; } = true;
    private Editor _editor;
    private string _query;
    private const string DefaultCatId = "default";
    private Dictionary<string, bool> _expandedPanels = new() { {DefaultCatId, true} };
    private bool _interactiveMode = false;
    private bool InteractiveMode { 
        get => _interactiveMode; 
        set { 
            _interactiveMode = value; 
            InteractiveModeChanged?.Invoke(value); 
        }
    }
    public event Action<bool> InteractiveModeChanged;

    private IEnumerable<(string, Component)> catId2Component =>
        Shared.CatId2CompServiceIdAndComponentIds.SelectMany(kv =>
            kv.Value.Select(compId => (kv.Key, compId))).Select(catIdCompId =>
                (catIdCompId.Key, Shared.ServiceIdAndComponentId2Component[catIdCompId.compId]));

    private IEnumerable<string> sortedCatIds => new List<string> { DefaultCatId }
            .Concat(Shared.CatId2CompServiceIdAndComponentIds.Keys
            .Where(catId => catId != DefaultCatId)
            .ToImmutableSortedSet()
            .AsEnumerable());

    private void ClearButtonClicked()
    {
        if (ClearButtonDisabled)
        {
            if (ClearButtonTimer == null)
            {
                //Console.WriteLine("Creating new timer");
                _editor = this;
                ClearButtonTimer = new Timer(2000) { AutoReset = false };
                ClearButtonTimer.Elapsed += ClearButtonTimerElapsed;
            }
            ClearButtonTimer.Start();
            ClearButtonDisabled = false;
        }
        else
        {
            ClearDiagram();
            ClearButtonDisabled = true;
        }
    }

    private void ClearButtonTimerElapsed(object sender, ElapsedEventArgs e)
    {
        //Console.WriteLine("Timer elapsed");
        ClearButtonDisabled = true;
        _editor?.InvokeAsync(StateHasChanged);
    }

    private async Task AddComponentServiceSturdyRef()
    {
        var parameters = new DialogParameters();
        parameters.Add("InterfaceId", typeof(Mas.Schema.Registry.IRegistry).GetCustomAttribute<Capnp.TypeIdAttribute>(false)?.Id);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dia = await DialogService.ShowAsync<NewSturdyRefDialog>("Add components service sturdy reference", parameters, options);
        var res = await dia.Result;
        if (res is { Data: StoredSrData nb })// && editData == null)
        {
            if (nb.SturdyRef.Length == 0) return;
            await StoredSrData.SaveNew(LocalStorage, nb);
            if (nb.AutoConnect) await Shared.ConnectToRegistryService(ConMan, nb.PetName, nb.SturdyRef);
        }
        StateHasChanged();
    }

    private async Task AddChannelServiceSturdyRef()
    {
        var parameters = new DialogParameters();
        parameters.Add("InterfaceId", typeof(Mas.Schema.Fbp.IStartChannelsService).GetCustomAttribute<Capnp.TypeIdAttribute>(false)?.Id);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dia = await DialogService.ShowAsync<NewSturdyRefDialog>("Add channel service sturdy reference", parameters, options);
        var res = await dia.Result;
        if (res is { Data: StoredSrData nb })// && editData == null)
        {
            if (nb.SturdyRef.Length == 0) return;
            await StoredSrData.SaveNew(LocalStorage, nb);
            if (nb.AutoConnect) await Shared.ConnectToStartChannelsService(ConMan, nb.PetName, nb.SturdyRef);
        }
    }

    private async Task ShowSturdyRefDialog()
    {
        async Task HandleNewConnections((ulong, string, string) intIdAndSrAndPn)
        {
            var sr = intIdAndSrAndPn.Item2;
            if (!Shared.SturdyRef2Services.TryGetValue(sr, out var value)) return;
            var intId = intIdAndSrAndPn.Item1;
            var petName = intIdAndSrAndPn.Item3;
            if (intId == Shared.ChannelStarterInterfaceId)
            {
                if (value is IStartChannelsService service)
                {
                    var info = await service.Info();
                    var petName2 = Shared.MakeUniqueKey(Shared.ServiceId2ChannelStarterServices, petName);
                    Shared.ServiceId2ChannelStarterServices[info.Id] = service;
                    Shared.ChannelServiceIdToPetNameAndSturdyRef[info.Id] = (petName2, sr);
                }
            }
            else if (intId == Shared.RegistryInterfaceId && value is IRegistry reg)
            {
                var info = await reg.Info();
                var petName2 = Shared.MakeUniqueKey(Shared.ServiceId2Registries, petName);
                Shared.ServiceId2Registries[info.Id] = Proxy.Share(reg);
                Shared.RegistryServiceIdToPetNameAndSturdyRef[info.Id] = (petName2, sr);
                await Shared.LoadComponentsFromRegistry(Proxy.Share(reg), sr);
                StateHasChanged();
            }
        }

        EventCallback<(ulong, string, string)> ecb = new(this, HandleNewConnections);
        var parameters = new DialogParameters();
        parameters.Add("InterfaceIdToType", Shared.InterfaceIdToType);
        parameters.Add("SturdyRef2Services", Shared.SturdyRef2Services);
        parameters.Add("ConnectedToInterfaceIdAndSturdyRefAndPetNameChanged", ecb);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        await DialogService.ShowAsync<LocallyStoredSturdyRefsDialog>("Sturdy reference bookmarks", parameters, options);
    }
}